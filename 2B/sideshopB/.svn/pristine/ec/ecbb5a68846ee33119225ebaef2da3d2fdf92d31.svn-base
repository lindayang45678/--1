package com.lakala.module.goods.service.impl;

import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.lakala.base.model.TgoodsinfopoolWithBLOBs;
import com.lakala.base.model.TgoodskuinfopoolWithBLOBs;
import com.lakala.base.model.Timages;
import com.lakala.base.model.Torderitems;
import com.lakala.base.model.VirtualCate;
import com.lakala.exception.LakalaException;
import com.lakala.module.comm.ObjectOutput;
import com.lakala.module.comm.RomoteIOUtil;
import com.lakala.module.goods.service.GoodsPoolService;
import com.lakala.module.goods.service.GoodsService;
import com.lakala.module.goods.vo.GoodsInput;
import com.lakala.module.goods.vo.GoodsPoolBaseInfoVO;
import com.lakala.module.goods.vo.GoodsPoolInfoVO;
import com.lakala.module.goods.vo.GoodsPoolSkuInfoVO;
import com.lakala.module.goods.vo.ImageInfoVO;
import com.lakala.module.goods.vo.RealCateVO;
import com.lakala.util.ConfigUtil;
import com.lakala.util.ReturnMsg;
import com.lakala.util.StringUtil;

/**
 * 
 * @ClassName: GoodsPoolServiceImpl
 * @Description: 平台商品池服务接口实现
 * @author zhiziwei
 * @date 2015-3-6 上午11:29:34
 * 
 */
@Service
public class GoodsPoolServiceImpl implements GoodsPoolService {
	private Logger logger = Logger.getLogger(GoodsPoolServiceImpl.class);
	
	@Autowired
	private com.lakala.mapper.r.goods.TgoodsinfopoolMapper tgoodsinfopoolMapper_R;
	@Autowired
	private com.lakala.mapper.r.goods.TgoodskuinfopoolMapper tgoodskuinfopoolMapper_R;
	@Autowired
	private com.lakala.mapper.r.goods.TimagesMapper timagesMapper_R;
	@Autowired
	private com.lakala.mapper.w.goods.TimagesMapper timagesMapper_W;
	@Autowired
	private com.lakala.mapper.r.order.TorderitemsMapper torderitemsMapper_R;
	@Autowired
	private com.lakala.mapper.r.virtualcat.VirtualCateMapper virtualCateMapper_R;
	@Autowired
	private GoodsService goodsService;
	@Autowired
	private ConfigUtil cfg;
	
	/**
     * @Description 根据结算分类，获取平台商品池商品列表
     * @author zhiziwei
     */
	@Override
	public ObjectOutput<List<GoodsPoolBaseInfoVO>> getGoodsPoolList(GoodsInput input)
			throws LakalaException {
		
		logger.info("获取平台商品池商品列表：input = " + input.toString());
		
		//取出请求参数
		String tVirtualCateId = input.gettVirtualCateId();
		Integer page = input.getPage();
		Integer rows = input.getPageSize();
		//定义返回值		
		ObjectOutput<List<GoodsPoolBaseInfoVO>> res = new ObjectOutput<List<GoodsPoolBaseInfoVO>>();
		res._ReturnData = new ArrayList<GoodsPoolBaseInfoVO>();
		
		//页面参数合法性校验
		if (!StringUtil.verdict(tVirtualCateId) || null == page || 
				null == rows) {
			res.set_ReturnCode(ReturnMsg.CODE_ERR_DEFAULT);
			res.set_ReturnMsg(ReturnMsg.MSG_PARAMS_ERROR);
			return res;
		}
		
		//业务处理
		try {
			//如果该分类是父类，获取所有子分类
			List<GoodsInput> _list = new ArrayList<GoodsInput>();
			_list.add(input);
			getSubVitureCate(_list, input);
			
			//根据虚分类获取实分类
			Set<Integer> rcates = new HashSet<Integer>();
			for (GoodsInput gi : _list) {
				ObjectOutput<List<RealCateVO>> list = goodsService.queryRealCatByVirtualcat(gi);
				
				//取出实分类
				for (RealCateVO vo : list.get_ReturnData()) {
					if (StringUtil.verdict(vo.gettRealCateTreeDisc())) {
						rcates.add(vo.gettRealCateId());
					}
				}
			}
			
			//取出实分类下的商品
			for (Integer tRealCateId : rcates) {
				//封装查询参数
				Map<String, Object> parm = new HashMap<String, Object>();
				parm.put("tRealCateId", tRealCateId);
				parm.put("page", (page - 1) * rows);
				parm.put("rows", Integer.valueOf(rows));
				
				List<TgoodsinfopoolWithBLOBs> goods = tgoodsinfopoolMapper_R.getGoodsListByRealCat(parm);
				
				for (TgoodsinfopoolWithBLOBs good : goods) {
					GoodsPoolBaseInfoVO vo = new GoodsPoolBaseInfoVO();
					vo.settGoodInfoPoolId(good.getTgoodinfopoolid());
					vo.setGoodName(good.getGoodname());
					vo.setDistributionFlag(good.getDistributionflag());
					vo.setGoodBigPic(good.getGoodbigpic().split(";")[0]);
					
					res._ReturnData.add(vo);
				}
			}
			
			res.set_ReturnCode(ReturnMsg.CODE_SUCCESS);
			res.set_ReturnMsg(ReturnMsg.MSG_SUCCESS_DEFAULT);
		} catch (Exception e) {
			throw new LakalaException(e);
		}
		
		return res;
	}
	
	/**
	 * 获取父虚分类下的子分类 zhiziwei
	 */
	private List<GoodsInput> getSubVitureCate(List<GoodsInput> list, GoodsInput input) throws LakalaException{
		try {
			Map<String, Object> parm = new HashMap<String, Object>();
			parm.put("parentid", input.gettVirtualCateId());
			List<VirtualCate> catList = virtualCateMapper_R.selectByParentId(parm);
			if (null != catList && catList.size() > 0) {
				for (VirtualCate cat : catList) {
					GoodsInput gi = new GoodsInput();
					gi.settVirtualCateId(cat.getTvirtualcateid().toString());
					//缓存查到的结果
					list.add(gi);
					//递归查询下面的子分类
					getSubVitureCate(list, gi);
				}
			}
		} catch (Exception e) {
			throw new LakalaException(e);
		}
		return list;
	}

	/**
	 * @Description 获取平台商品详情
	 * @author zhiziwei
	 */
	@Override
	public ObjectOutput<GoodsPoolInfoVO> getGoodsDetail(GoodsInput input, HttpServletRequest req)
			throws LakalaException {
		logger.info("获取商品详情：input = " + input.toString());
		
		//当前时间
		Date now = new Date(System.currentTimeMillis());
		//取出请求参数
		String tGoodsInfoId = input.gettGoodsInfoId();
		String mobile = input.getMobile();
		//定义返回值
		ObjectOutput<GoodsPoolInfoVO> res = new ObjectOutput<GoodsPoolInfoVO>();
		res._ReturnData = new GoodsPoolInfoVO();
		
		//页面参数合法性校验
		if (!StringUtil.verdict(tGoodsInfoId) || !StringUtil.verdict(mobile)) {
			res.set_ReturnCode(ReturnMsg.CODE_ERR_DEFAULT);
			res.set_ReturnMsg(ReturnMsg.MSG_PARAMS_ERROR);
			return res;
		}
		
		//业务处理
		try {
			//商品基本信息
			TgoodsinfopoolWithBLOBs goodsInfo = tgoodsinfopoolMapper_R
					.selectByPrimaryKey(Integer.valueOf(tGoodsInfoId));
			
			res._ReturnData.settGoodInfoPoolId(goodsInfo.getTgoodinfopoolid());
			res._ReturnData.settRealCateId(goodsInfo.getTrealcateid());
			res._ReturnData.settRealCateDisc(goodsInfo.getTrealcatedisc());
			res._ReturnData.settRealCateTreeDisc(goodsInfo.getTrealcatetreedisc());
			res._ReturnData.setGoodName(goodsInfo.getGoodname());
			res._ReturnData.setGoodBigPic(goodsInfo.getGoodbigpic());
			res._ReturnData.setDistributionFlag(goodsInfo.getDistributionflag());
			res._ReturnData.setGoodIntroduce(goodsInfo.getGoodintroduce());
			res._ReturnData.setBalanceWay(goodsInfo.getBalanceway());
			res._ReturnData.setIsExpressToHome(goodsInfo.getIsexpresstohome());
			res._ReturnData.settBrandId(goodsInfo.getTbrandid());
			res._ReturnData.setBrandName(goodsInfo.getBrandname());
			res._ReturnData.setGoodBarCode(goodsInfo.getGoodbarcode());
			
			//商品sku信息
			List<TgoodskuinfopoolWithBLOBs> skusInfo = tgoodskuinfopoolMapper_R
					.selectGoodSkuInfoByGoodId(Integer.valueOf(tGoodsInfoId));
			
			List<GoodsPoolSkuInfoVO> skus = new ArrayList<GoodsPoolSkuInfoVO>();
			for (TgoodskuinfopoolWithBLOBs skuInfo : skusInfo) {
				GoodsPoolSkuInfoVO gsv = new GoodsPoolSkuInfoVO();
				gsv.settGoodSkuInfoPoolId(skuInfo.getTgoodskuinfopoolid());
				gsv.setSkuIdStr(skuInfo.getSkuidstr());
				gsv.setSkuFrontDisNameStr(skuInfo.getSkufrontdisnamestr());
				
				skus.add(gsv);
			}
			res._ReturnData.setSkus(skus);
			
			//图片数据:下载平台商品图片，并插入对应的新的图片数据
			Map<String, Object> imgParm = new HashMap<String, Object>();
			imgParm.put("goodsId", Long.valueOf(tGoodsInfoId));
			imgParm.put("targetType", 3);
			List<Timages> imgs = timagesMapper_R.queryImgByGoodsId(imgParm);
			
			List<ImageInfoVO> imgsVo = new ArrayList<ImageInfoVO>();
			
			for (Timages img : imgs) {
				Timages _img = new Timages();
				//下载图片
				String newUrl = downLoadImgFromSer(img.getUrl(), mobile, req);
				//插入相应的图片数据
				_img.setUrl(newUrl);
				_img.setSort(img.getSort());
				_img.setLastmoddate(now);
				timagesMapper_W.insertSelective(_img);
				
				//返回页面的数据
				ImageInfoVO imgVo = new ImageInfoVO();
				imgVo.setTimageId(_img.getTimageid());
				imgVo.setUrl(_img.getUrl());
				imgVo.setSort(_img.getSort());
				imgsVo.add(imgVo);
			}
			res._ReturnData.setImages(imgsVo);
			res.set_ReturnCode(ReturnMsg.CODE_SUCCESS);
			res.set_ReturnMsg(ReturnMsg.MSG_SUCCESS_DEFAULT);
		} catch (Exception e) {
			throw new LakalaException(e);
		}
        
		return res;
	}

	/**
	 * @Description 根据psam id，获取近期下单商品关联的商品池商品（本店近期批发）
	 * @author zhiziwei
	 */
	@Override
	public ObjectOutput<List<GoodsPoolBaseInfoVO>> getGoodsListByPsam(GoodsInput input)
			throws LakalaException {
		logger.info("根据psam id，获取近期下单商品关联的平台商品（本店近期批发）：input = "
			+ input.toString());
		
		//取出请求参数
		String psam = input.getPsam();
		String page = input.getPage().toString();
		String rows = input.getPageSize().toString();
		//定义返回值		
		ObjectOutput<List<GoodsPoolBaseInfoVO>> res = new ObjectOutput<List<GoodsPoolBaseInfoVO>>();
		res._ReturnData = new ArrayList<GoodsPoolBaseInfoVO>();
		
		//页面参数合法性校验
		if (!StringUtil.verdict(psam) || !StringUtil.verdict(page) || !StringUtil.verdict(rows)) {
			res.set_ReturnCode(ReturnMsg.CODE_ERR_DEFAULT);
			res.set_ReturnMsg(ReturnMsg.MSG_PARAMS_ERROR);
			return res;
		}
		
		try {
			//查询指定psam，近一个月内，下过单的商品
			List<Torderitems> items = torderitemsMapper_R.getGoodsListByPsam(psam);
			
			if (null != items && items.size() > 0) {
				//查询与之关联的商品池商品信息
				Map<String, Object> parm = new HashMap<String, Object>();
				parm.put("goodslist", items);
				parm.put("page", (Integer.parseInt(page) - 1) * Integer.parseInt(rows));
				parm.put("rows", Integer.valueOf(rows));
				List<TgoodsinfopoolWithBLOBs> goodsList = tgoodsinfopoolMapper_R.getGoodsListByProviderGoodsId(parm);
				
				//封装返回值
				for (TgoodsinfopoolWithBLOBs goods : goodsList) {
					GoodsPoolBaseInfoVO vo = new GoodsPoolBaseInfoVO();
					vo.settGoodInfoPoolId(goods.getTgoodinfopoolid());
					vo.setGoodName(goods.getGoodname());
					vo.setDistributionFlag(goods.getDistributionflag());
					vo.setGoodBigPic(goods.getGoodbigpic().split(";")[0]);
					
					res._ReturnData.add(vo);			
				}
			}
			
			res.set_ReturnCode(ReturnMsg.CODE_SUCCESS);
			res.set_ReturnMsg(ReturnMsg.MSG_SUCCESS_DEFAULT);
		} catch (Exception e) {
			throw new LakalaException(e.fillInStackTrace());
		}
		
		return res;
	}
	
    /**
     * 下载图片服务器图片，并返回最新URL
     */
    private String downLoadImgFromSer(String url, String mobile, HttpServletRequest req) {
        // 当前WEB环境的上层目录
        String webParentPath = cfg.getTemp() + new File(req.getSession().getServletContext()
                .getRealPath("/")).getParent();
        //随机生成文件名
        String fileName = UUID.randomUUID().toString()
                + url.substring(url.lastIndexOf("."), url.length());
        //当前商品图片存放路径
        String destFile = webParentPath + cfg.getSystem_name()
                + cfg.getLocal_temp_path() + "/" + mobile + "/" + fileName;
        //下载图片
        RomoteIOUtil.downLoadFromURL(url, destFile);

        //最新访问URL
        String newUrl = cfg.getSideshopB_out_url() + cfg.getLocal_temp_path() + "/"
                + mobile + "/" + fileName;
        return newUrl;
    }
}
