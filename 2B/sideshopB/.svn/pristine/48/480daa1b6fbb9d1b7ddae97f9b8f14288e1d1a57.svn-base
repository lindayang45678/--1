package com.lakala.module.wholesale.controller;

import com.lakala.exception.LakalaException;
import com.lakala.model.ProductDetailedInformation;
import com.lakala.module.comm.ObjectOutput;
import com.lakala.module.mongo.service.SideShopBMongoService;
import com.lakala.module.wholesale.model.InputModel;
import com.lakala.module.wholesale.model.OutListModel;
import com.lakala.module.wholesale.service.WholesaleService;
import com.lakala.util.Pagination;
import com.lakala.util.ReturnMsg;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.List;

/**
 * Created by HOT.LIU on 2015/2/13.
 */
@Component
@RequestMapping("/sideshop/wholesale")
public class WholesaleController {
    Logger logger = Logger.getLogger(WholesaleController.class);

    @Autowired
    private WholesaleService wholesaleService;
    @Autowired
    private SideShopBMongoService sideShopBMongoService;

    /**
     * 获得批发进货左侧树形分类.
     *
     * @param inputModel the input model
     * @return the object output
     */
    @RequestMapping(value = "/left", method = RequestMethod.POST)
    @ResponseBody
    public ObjectOutput left(InputModel inputModel) {
        ObjectOutput info = null;
        try {
            info = wholesaleService.left(inputModel.getPsam(), inputModel.getChannelid());
        } catch (LakalaException e) {
            logger.error(e.getMessage());
            info = new ObjectOutput();
            info.set_ReturnCode(ReturnMsg.CODE_ERR_DEFAULT);
            info.set_ReturnMsg(ReturnMsg.MSG_ERR_DEFAULT);
        }
        return info;
    }

    /**
     * 获得批发进货左侧树形分类.
     *
     * @param inputModel the input model
     * @return the object output
     */
    @RequestMapping(value = "/leftV1", method = RequestMethod.POST)
    @ResponseBody
    public ObjectOutput left_mongo(InputModel inputModel) {
        ObjectOutput info = null;
        try {
            info = sideShopBMongoService.left_mongo(inputModel.getPsam(), inputModel.getChannelid());
        } catch (LakalaException e) {
            logger.error(e.getMessage());
            info = new ObjectOutput();
            info.set_ReturnCode(ReturnMsg.CODE_ERR_DEFAULT);
            info.set_ReturnMsg(ReturnMsg.MSG_ERR_DEFAULT);
        }
        return info;
    }

    /**
     * 获得商品批发进货商品列表.
     *
     * @param inputModel the input model
     * @return the object output
     */

    @RequestMapping(value = "/list", method = RequestMethod.POST)
    @ResponseBody
    public ObjectOutput list(InputModel inputModel) {
        ObjectOutput info = null;
        int pageCount = 0;
        try {
            if ("".equals(inputModel.getSearchparm())) {
                info = wholesaleService.getGoodsByPsamAndVirtualCatId(inputModel.getPsam(), inputModel.getChannelid(), inputModel.getVirtualcatid());
            } else {
                info = wholesaleService.searchGoods(inputModel.getPsam(), inputModel.getChannelid(), inputModel.getVirtualcatid(), inputModel.getSearchparm());
            }
            if (ReturnMsg.CODE_SUCCESS.equals(info.get_ReturnCode())) {
                OutListModel outListModel = new OutListModel();
                List<ProductDetailedInformation> list = (List<ProductDetailedInformation>) info.get_ReturnData();
                if (list != null) {

                    if ((list.size() % inputModel.getPageSize()) == 0) {
                        pageCount = (list.size() / inputModel.getPageSize());
                    } else {
                        pageCount = (list.size() / inputModel.getPageSize()) + 1;
                    }
                    if (inputModel.getPage() <= pageCount) {
                        outListModel.setCount(list.size());
                        Pagination pagination = new Pagination(inputModel.getPage(), inputModel.getPageSize(), list);
                        list = pagination.doPagination();
                        info = wholesaleService.getPageProductDetile(list, inputModel.getPsam());
                        if (ReturnMsg.CODE_SUCCESS.equals(info.get_ReturnCode())) {
                            list = (List<ProductDetailedInformation>) info.get_ReturnData();
                            outListModel.setList(list);
                            info.set_ReturnData(outListModel);
                        }
                    } else {
                        info.set_ReturnData(outListModel);
                    }
                }
            }

        } catch (Exception e) {
            logger.error(e.getMessage());
            info = new ObjectOutput();
            info.set_ReturnCode(ReturnMsg.CODE_ERR_DEFAULT);
            info.set_ReturnMsg(ReturnMsg.MSG_ERR_DEFAULT);
        }
        return info;
    }

    /**
     * 获得商品批发进货商品列表.
     *
     * @param inputModel the input model
     * @return the object output
     */

    @RequestMapping(value = "/listV1", method = RequestMethod.POST)
    @ResponseBody
    public ObjectOutput list_mongo(InputModel inputModel) {
        ObjectOutput info = null;
        try {
            info = sideShopBMongoService.list_mongo(inputModel.getPsam(), inputModel.getChannelid(), inputModel.getVirtualcatid(), inputModel.getSearchparm(), inputModel.getPage(), inputModel.getPageSize(), Integer.parseInt(inputModel.getLevel() == null ? "0" : inputModel.getLevel()), inputModel.getPlatorself());
            if (ReturnMsg.CODE_SUCCESS.equals(info.get_ReturnCode())) {

            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            info = new ObjectOutput();
            info.set_ReturnCode(ReturnMsg.CODE_ERR_DEFAULT);
            info.set_ReturnMsg(ReturnMsg.MSG_ERR_DEFAULT);
        }
        return info;
    }

    /**
     * 获得批发进货商品详情.
     *
     * @param inputModel the input model
     * @return the object output
     */

    @RequestMapping(value = "/detail", method = RequestMethod.POST)
    @ResponseBody
    public ObjectOutput detail(InputModel inputModel) {
        ObjectOutput info = null;
        try {
            info = wholesaleService.detail(inputModel.getPsam(), inputModel.getChannelid(), inputModel.getGoodsid());
        } catch (LakalaException e) {
            logger.error(e.getMessage());
            info = new ObjectOutput();
            info.set_ReturnCode(ReturnMsg.CODE_ERR_DEFAULT);
            info.set_ReturnMsg(ReturnMsg.MSG_ERR_DEFAULT);
        }
        return info;
    }

    /**
     * 获得批发进货商品详情.
     *
     * @param inputModel the input model
     * @return the object output
     */

    @RequestMapping(value = "/detailV1", method = RequestMethod.POST)
    @ResponseBody
    public ObjectOutput detail_mongo(InputModel inputModel) {
        ObjectOutput info = null;
        try {
            info = sideShopBMongoService.detail_mongo(inputModel.getPsam(), inputModel.getChannelid(), inputModel.getGoodsid());
        } catch (LakalaException e) {
            logger.error(e.getMessage());
            info = new ObjectOutput();
            info.set_ReturnCode(ReturnMsg.CODE_ERR_DEFAULT);
            info.set_ReturnMsg(ReturnMsg.MSG_ERR_DEFAULT);
        }
        return info;
    }

    @RequestMapping(value = "/soldoutlist", method = RequestMethod.POST)
    @ResponseBody
    public ObjectOutput soldoutList(InputModel inputModel) {
        ObjectOutput info = null;
        try {
            info = wholesaleService.getSoldoutList(inputModel.getPsam(), inputModel.getSearchparm(), inputModel.getPage(), inputModel.getPageSize());
        } catch (LakalaException e) {
            logger.error(e.getMessage());
            info = new ObjectOutput();
            info.set_ReturnCode(ReturnMsg.CODE_ERR_DEFAULT);
            info.set_ReturnMsg(ReturnMsg.MSG_ERR_DEFAULT);
        }
        return info;
    }
}
