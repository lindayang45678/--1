package com.lakala.module.order.controller;

import java.util.HashMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.jboss.netty.handler.codec.http.HttpResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.lakala.exception.LakalaException;
import com.lakala.model.Torder;
import com.lakala.module.comm.ObjectOutput;
import com.lakala.module.order.service.OrderService;
import com.lakala.module.order.vo.OrderDetailInput;
import com.lakala.module.order.vo.OrderMultQueryInput;
import com.lakala.util.ReturnMsg;

/**
 * 只按照两种方式提供接口
 * 1.返回JSON格式
 *   1.1 以RETS风格请求，一般用于GET请求；
 *   1.2 使用路径中定义参数风格获取数据；
 *   1.3 若为POST请求，则使用@RequestParam获取数据；
 *   1.4 返回的数据都用DATA接收，并提供处理成功或返回标示；
 *   
 * 2.返回对象
 *   2.1 此种适用于直接使用JSP页面输出；
 *   2.2 按照普通的@RequestParam获取参数；
 *   2.3 以modle返回数据，返回的字符串为JSP文件路径；
 * 
 * @author ph.li
 *
 */

@Controller
@RequestMapping("/order")
public class OrderController {
	Logger logger = Logger.getLogger(OrderController.class);
	
	@Autowired
	private OrderService orderService;

    /**
     * 
     * @param id 订单号
     * @param request
     * @param response
     * @return
     */
	@RequestMapping(value = "/detail/{orderId}")  
	public @ResponseBody HashMap<String,Object> selectAllOrderListBySelection(
			@PathVariable String orderId,
			HttpServletRequest request, HttpServletResponse response){
		logger.info("---------orderId:"+orderId);
		Torder order = null;
		try{
			order = orderService.loadOrderByKey(orderId);
		}catch(LakalaException e){
			logger.error(e.getMessage());
		}
		HashMap<String,Object> map = new HashMap<String,Object>();
		map.put("data", order);
		map.put("flag", order==null?"FAIL":"SUCCESS");
		//出错时，返回出错信息
		map.put("msg", "faild msg!");
		return map;
	}
	
	@RequestMapping(value = "/detailtest")  
	public String testModel(Model model,
			@RequestParam(value = "flag", required = false) String flag){
		model.addAttribute("testflag", "flag is ok!");
		return "/jsp/test.jsp";
	}
	
	
	/**
     * 订单全部收货 
     * @param tallorderid 订单号
     * @param request
     * @param response
     * @return
     */
	@RequestMapping(value = "/receiptallgoods/{tallorderid}/{token}")  
	public @ResponseBody HashMap<String,Object> receiptallgoods(
			@PathVariable String tallorderid,@PathVariable String token,
			HttpRequest request, HttpResponse response){
		logger.info("------cancelorder---tallorderid:"+tallorderid);
		
		HashMap<String,Object> map = new HashMap<String,Object>();
		map.put("data", tallorderid);
		map.put("flag", tallorderid==null?"FAIL":"SUCCESS");
		//出错时，返回出错信息
		map.put("msg", "全部收货成功");
		return map;
	}
	
	
	
	/**
	 * 多条件订单列表查询 -查列表
	 * @author yhg
	 * @param OrderMultQueryInput 输入
	 * @see OrderMultQueryInput
	 * @return 输出
	 * @see ObjectOutput
	 */
	@RequestMapping(value = "/multiquery",method = RequestMethod.POST)
	public @ResponseBody ObjectOutput orderMultiquery(OrderMultQueryInput orderinput){
		ObjectOutput info = null;
		try{
			info = orderService.orderMultiquery(orderinput);
		}catch(LakalaException e){
			logger.error(e.getMessage());
			info = new ObjectOutput();
			info.set_ReturnCode(ReturnMsg.CODE_ERR_DEFAULT);
			info.set_ReturnMsg(ReturnMsg.MSG_ERR_DEFAULT);
		}
		return info;
	}
	
	
	/**
	 * 多条件订单查询 -查订单详情 默认是未取消的订单
	 * @author yhg
	 * @param orderdetailinput 输入
	 * @see orderdetailinput
	 * @return 登录输出
	 * @see ObjectOutput
	 */
	@RequestMapping(value = "/view",method = RequestMethod.POST)
	public @ResponseBody ObjectOutput orderView(OrderDetailInput orderdetailinput){
		ObjectOutput info = null;
		try{
			info = orderService.orderView(orderdetailinput);
		}catch(LakalaException e){
			logger.error(e.getMessage());
			info = new ObjectOutput();
			info.set_ReturnCode(ReturnMsg.CODE_ERR_DEFAULT);
			info.set_ReturnMsg(ReturnMsg.MSG_ERR_DEFAULT);
		}
		return info;
	}
	
	
}
