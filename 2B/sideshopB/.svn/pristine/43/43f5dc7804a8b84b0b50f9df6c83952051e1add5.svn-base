package com.lakala.module.goods.service.impl;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import com.alibaba.fastjson.JSON;
import com.lakala.exception.LakalaException;
import com.lakala.model.ProductDetail;
import com.lakala.model.ProductDetailedInformation;
import com.lakala.model.TerminalChannel;
import com.lakala.model.TerminalProduct;
import com.lakala.module.comm.ObjectOutput;
import com.lakala.module.comm.RedisServiceImpl;
import com.lakala.module.goods.service.SideshopGoodsService;
import com.lakala.module.goods.vo.SideShopGoodsListInput;
import com.lakala.module.goods.vo.Tdiscount;
import com.lakala.module.wholesale.model.Constant;
import com.lakala.module.wholesale.model.OutListModel;
import com.lakala.module.wholesale.service.WholesaleService;
import com.lakala.service.Redis;
import com.lakala.util.Pagination;
import com.lakala.util.ReturnMsg;

/**
 * Created by HOT.LIU on 2015/2/28.
 */
@Service
public class SideshopGoodsServiceImpl extends RedisServiceImpl implements SideshopGoodsService {
    Logger logger = Logger.getLogger(SideshopGoodsServiceImpl.class);
    
    @Autowired
    private WholesaleService wholesaleService;
    
    @Autowired
    private Redis redis;

    @Autowired
    private com.lakala.mapper.r.sdbmediastatistics.SdbMediaStatisticsMapper sdbMediaStatisticsMapper_R;
    
    @Autowired
    private com.lakala.mapper.r.goodspublishkdbskuo2o.TgoodsPublishKdbSkuO2oMapper tgoodsPublishKdbSkuO2oMapper_R;

    @Autowired
    private com.lakala.mapper.r.goodspublishforkdb.GoodsPublishForKDBMapper goodsPublishForKDBMapper_R;

    @Autowired
    private com.lakala.mapper.r.goods.TgoodskuinfoMapper tgoodskuinfoMapper_R;
    
    @Autowired
    private com.lakala.mapper.r.goods.TdiscountMapper tdiscountMapper_R;

	@Override
	public ObjectOutput getGoodsByPsamAndVirtualCatId(SideShopGoodsListInput inputModel) throws LakalaException {
        ObjectOutput data = new ObjectOutput();
        List<ProductDetailedInformation> list = new ArrayList<ProductDetailedInformation>();
        List<Map<String, ProductDetailedInformation>> list1 = new ArrayList<Map<String, ProductDetailedInformation>>();
        List<ProductDetail> productDetails = new ArrayList<ProductDetail>();
        Map<String, ProductDetailedInformation> idMapping = new HashMap<String, ProductDetailedInformation>();

        if (inputModel == null || StringUtils.isEmpty(inputModel.getPsam()) || StringUtils.isEmpty(inputModel.getChannelid()) 
        		|| StringUtils.isEmpty(inputModel.getVirtualcatid()) || StringUtils.isEmpty(inputModel.getType())) {
            data.set_ReturnCode(ReturnMsg.CODE_ERR_000002);
            data.set_ReturnMsg("参数为空!");
            return data;
        }

        try {
            TerminalProduct tpd = this.getTerminalProductByParam(inputModel.getPsam(), inputModel.getChannelid());
            if (tpd != null) {
                List<TerminalChannel> terminalChannels = tpd.getTerminalChannels();
                for (TerminalChannel terminalChannel : terminalChannels) {
                    productDetails = terminalChannel.getProductList();
                    for (ProductDetail productDetail : productDetails) {
                        ProductDetailedInformation productDetailedInformation = productDetail.getProductDetailedInformation();
                     
                        if (!"all".equals(inputModel.getVirtualcatid())) {
                            Arrays.sort(productDetail.getVirtualCatIds());
                            int index = Arrays.binarySearch(productDetail.getVirtualCatIds(), inputModel.getVirtualcatid());
                            if (index > -1) {
                                if (idMapping.get(productDetailedInformation.getTgoodinfoid()) == null) {
                                    idMapping.put(productDetailedInformation.getTgoodinfoid(), productDetailedInformation);
                                } else {
                                    if (new BigDecimal(idMapping.get(productDetailedInformation.getTgoodinfoid()).getSaleprice_o2o()).compareTo(new BigDecimal(productDetailedInformation.getSaleprice_o2o())) == 1) {
                                        idMapping.put(productDetailedInformation.getTgoodinfoid(), productDetailedInformation);
                                    }
                                }
                            }
                            
                        } else {
                            if (idMapping.get(productDetailedInformation.getTgoodinfoid()) == null) {
                                idMapping.put(productDetailedInformation.getTgoodinfoid(), productDetailedInformation);
                            } else {
                                if (new BigDecimal(idMapping.get(productDetailedInformation.getTgoodinfoid()).getSaleprice_o2o()).compareTo(new BigDecimal(productDetailedInformation.getSaleprice_o2o())) == 1) {
                                    idMapping.put(productDetailedInformation.getTgoodinfoid(), productDetailedInformation);
                                }
                            }
                        }
                        
                        
                        
                        
                        	
                    }
                }
            } else {
                data.set_ReturnCode(ReturnMsg.CODE_ERR_000003);
                data.set_ReturnMsg("没有找到该频道下的商品！");
                return data;
            }
            //多个sku相同只取价格最低显示
            list = new ArrayList<ProductDetailedInformation>(idMapping.values());
          
            Collections.sort(list, new Comparator<ProductDetailedInformation>() {
                public int compare(ProductDetailedInformation arg0, ProductDetailedInformation arg1) {
                    return arg1.getSort().compareTo(arg0.getSort());
                }
            });
            
            
            List<ProductDetailedInformation> list3 = new ArrayList<ProductDetailedInformation>();
            
            int page = inputModel.getPage();
            int pagesize = inputModel.getPageSize();
            
            
            ObjectOutput info = null;
            
            
            info = this.getPageProductDetile(list, inputModel.getPsam(), inputModel.getType());
            
            List<ProductDetailedInformation> listn = (List<ProductDetailedInformation>) info.get_ReturnData();
            
            OutListModel outListModel = new OutListModel();
            outListModel.setCount(listn.size());
            if("".equals(inputModel.getSearchparm())){
            	if(listn == null || listn.size() <=0){
                  	 data.set_ReturnCode(ReturnMsg.CODE_SUCCESS);
                       data.set_ReturnData(new ArrayList());
                       return data;
                  }
                if(listn != null && listn.size() <= pagesize){
               	   list3.addAll(listn);
   	   	        }else{
   	   	        	if(page*pagesize > listn.size()){
	   	   	        	data.set_ReturnCode(ReturnMsg.CODE_SUCCESS);
	   	   	        	data.set_ReturnData(outListModel);
   	   	        	return data;
   	   	        	}else{
	   	   	        	for(int n=(page-1)*pagesize ; n<page*pagesize ; n++){
	   	   	        		list3.add(listn.get(n));
	   	   	        	}
   	   	        	}
   	   	        	
   	   	        }
                
                  
               	outListModel.setList(list3);
               	
            }else{

            	outListModel.setList(list);
            }
            
            data.set_ReturnCode(ReturnMsg.CODE_SUCCESS);
            data.set_ReturnData(outListModel);
            return data;
        } catch (LakalaException e) {
            throw new LakalaException(e);
        }
    }

	@Override
	public ObjectOutput searchGoods(SideShopGoodsListInput inputModel) throws LakalaException{
        ObjectOutput data = new ObjectOutput();
        List<ProductDetailedInformation> productDetailedInformationList = new ArrayList<ProductDetailedInformation>();

        if (StringUtils.isEmpty(inputModel.getPsam()) || StringUtils.isEmpty(inputModel.getChannelid()) || StringUtils.isEmpty(inputModel.getVirtualcatid())) {
            data.set_ReturnCode(ReturnMsg.CODE_ERR_000002);
            data.set_ReturnMsg("参数为空!");
            return data;
        }

        try {
            data = this.getGoodsByPsamAndVirtualCatId(inputModel);
            Map<String, Object> map = new HashMap<String, Object>();
            /*List<ProductDetailedInformation> listss = null;
            map.put("psamCode", psamCode);
            map.put("searchparm", searchparm);
            if(type.equals("0")){
            	 listss = tgoodskuinfoMapper_R.getSoldoutList(map);
            }*/
           
            if (ReturnMsg.CODE_ERR_000003.equals(data.get_ReturnCode())) {
                return data;
            } else if (ReturnMsg.CODE_SUCCESS.equals(data.get_ReturnCode())) {
            	OutListModel outListModel = (OutListModel) data.get_ReturnData();
                List<ProductDetailedInformation> list = (List<ProductDetailedInformation>) outListModel.getList();
                for (ProductDetailedInformation productDetailedInformation : list) {
                    if (productDetailedInformation.getGoodname().indexOf(inputModel.getSearchparm()) != -1) {
                        productDetailedInformationList.add(productDetailedInformation);
                    }
                }
            }

            Collections.sort(productDetailedInformationList, new Comparator<ProductDetailedInformation>() {
                public int compare(ProductDetailedInformation arg0, ProductDetailedInformation arg1) {
                    return arg1.getSort().compareTo(arg0.getSort());
                }
            });
            OutListModel out = new OutListModel();
            out.setCount(productDetailedInformationList.size());
            out.setList(productDetailedInformationList);
            data.set_ReturnData(out);
            return data;
        } catch (LakalaException e) {
            throw new LakalaException(e);
        }
    }

	private TerminalProduct getTerminalProductByParam(String paramString, String channelCode) throws LakalaException {
        Map<Long, ProductDetail> idMapping = new HashMap<Long, ProductDetail>();
        Map<String, TerminalChannel> channelMapping = new HashMap<String, TerminalChannel>();
        idMapping.clear();
        channelMapping.clear();
        TerminalProduct allGoodsTpd = new TerminalProduct();
        TerminalProduct areaGoodsTpd = new TerminalProduct();
        TerminalProduct terminalGoodsTpd = new TerminalProduct();
        List<TerminalChannel> allTerminalChannels = null;
        List<TerminalChannel> areaTerminalChannels = null;
        List<TerminalChannel> terminalTerminalChannels = null;
        TerminalProduct returnGoodsTpd = new TerminalProduct();
        List<TerminalChannel> terminalChannelList = new ArrayList<TerminalChannel>();
        try {
            Map<String, Object> map = sdbMediaStatisticsMapper_R.selectSdbMediaStatisticsByPsam(paramString);
            if (paramString.toLowerCase().startsWith("cbc8")) {
                allGoodsTpd = (TerminalProduct) this.selectObjectByKey(Constant.ALL_HEADER + map.get("term_fbtype"), Constant.DUBBO_PARAMETER_PSAM_PREFIX_NEW + channelCode + "_" + (String) map.get("term_fbtype") + "_all");
                areaGoodsTpd = (TerminalProduct) this.selectObjectByKey(Constant.AREA_HEADER + map.get("term_fbtype"), Constant.DUBBO_PARAMETER_PSAM_PREFIX_NEW + channelCode + "_" + (String) map.get("term_fbtype") + "_" + map.get("city_area_no"));
                terminalGoodsTpd = (TerminalProduct) this.selectObjectByKey(Constant.PSAM_HEADER + map.get("term_fbtype"), Constant.DUBBO_PARAMETER_PSAM_PREFIX_NEW + channelCode + "_" + (String) map.get("term_fbtype") + "_" + paramString);
            }
            if (paramString.toLowerCase().startsWith("app")) {
                terminalGoodsTpd = (TerminalProduct) this.selectObjectByKey(Constant.PSAM_HEADER + map.get("term_fbtype"), Constant.DUBBO_PARAMETER_PSAM_PREFIX_NEW + channelCode + "_" + (String) map.get("term_fbtype") + "_" + paramString);
            }

            // /如果为null的话就说明该终端没有开通MessageBaseInput
            if (allGoodsTpd == null && areaGoodsTpd == null && terminalGoodsTpd == null) {
                return null;
            }
            if (allGoodsTpd != null) {
                allTerminalChannels = allGoodsTpd.getTerminalChannels();
            }
            if (areaGoodsTpd != null) {
                areaTerminalChannels = areaGoodsTpd.getTerminalChannels();
            }
            if (terminalGoodsTpd != null) {
                terminalTerminalChannels = terminalGoodsTpd.getTerminalChannels();
            }

            //把所有的商品放到map中以skuid为key去重，最终以终端中的商品为准
            //把全部商品放入idMapping
            if (allTerminalChannels != null) {
                for (TerminalChannel terminalChannel : allTerminalChannels) {
                    List<ProductDetail> productDetails = terminalChannel.getProductList();
                    for (ProductDetail productDetail : productDetails) {
                        idMapping.put(productDetail.getGoodSkuInfoId(), productDetail);
                    }
                    List<ProductDetail> productDetailList = new ArrayList(idMapping.values());
                    terminalChannel.setProductList(productDetailList);
                    channelMapping.put(terminalChannel.getNetChannelId(), terminalChannel);
                }
            }

            if (areaTerminalChannels != null) {
                //把所在区的商品放到idMapping
                for (TerminalChannel terminalChannel : areaTerminalChannels) {
                    List<ProductDetail> productDetails = terminalChannel.getProductList();
                    for (ProductDetail productDetail : productDetails) {
                        idMapping.put(productDetail.getGoodSkuInfoId(), productDetail);
                    }
                    List<ProductDetail> productDetailList = new ArrayList(idMapping.values());
                    terminalChannel.setProductList(productDetailList);
                    channelMapping.put(terminalChannel.getNetChannelId(), terminalChannel);
                }
            }

            if (terminalTerminalChannels != null) {
                //把终端商品放到idMapping
                for (TerminalChannel terminalChannel : terminalTerminalChannels) {
                    List<ProductDetail> productDetails = terminalChannel.getProductList();
                    for (ProductDetail productDetail : productDetails) {
                        idMapping.put(productDetail.getGoodSkuInfoId(), productDetail);
                    }
                    List<ProductDetail> productDetailList = new ArrayList(idMapping.values());
                    terminalChannel.setProductList(productDetailList);
                    channelMapping.put(terminalChannel.getNetChannelId(), terminalChannel);
                }
            }
            idMapping.clear();
            for (TerminalChannel terminalChannel : channelMapping.values()) {
                List<ProductDetail> productDetails = terminalChannel.getProductList();
                for (ProductDetail productDetail : productDetails) {
                    productDetail.setProductDetailedInformation(null);
                    productDetail.getProductDetailedInformation().setSort(productDetail.getSort());
                    productDetail.getProductDetailedInformation().setId(String.valueOf(productDetail.getO2oid()));
                    productDetail.getProductDetailedInformation().setGoodname(productDetail.getGoodName());
                    productDetail.getProductDetailedInformation().setGoodintroduce(productDetail.getGoodIntroduce());
                    productDetail.getProductDetailedInformation().setGoodbigpic(productDetail.getGoodBigPic());
                    productDetail.getProductDetailedInformation().setPromotionPrice(productDetail.getPromotionPrice());
                    productDetail.getProductDetailedInformation().setMarketprice(String.valueOf(productDetail.getMarketPrice() == null ? new BigDecimal("0").setScale(2, BigDecimal.ROUND_HALF_UP) : productDetail.getMarketPrice().setScale(2, BigDecimal.ROUND_HALF_UP)));
                    productDetail.getProductDetailedInformation().setSaleprice_o2o(String.valueOf(productDetail.getSalePrice()));
                    productDetail.getProductDetailedInformation().setTgoodinfoid(String.valueOf(productDetail.getGoodInfoId()));
                    productDetail.getProductDetailedInformation().setTgoodskuinfoid(String.valueOf(productDetail.getGoodSkuInfoId()));
                    productDetail.setGoodName(null);
                    productDetail.setGoodBigPic(null);
                    productDetail.setSalePrice(null);
                    productDetail.setGoodIntroduce(null);
                    productDetail.setMarketPrice(null);
                }
            }

            terminalChannelList = new ArrayList<TerminalChannel>(channelMapping.values());
            returnGoodsTpd.setTerminalChannels(terminalChannelList);
            //生成终端所有虚拟类目
            returnGoodsTpd.setChannelVirtualCatByTerminalChannel();
            return returnGoodsTpd;
        } catch (Exception e) {
            throw new LakalaException(e);
        }
    }

	@Override
	public ObjectOutput getPageProductDetile(
			List<ProductDetailedInformation> list, String psamCode, String type)
			throws LakalaException {
        ObjectOutput data = new ObjectOutput();
        List<String> o2oList = new ArrayList<String>();
        List<String> skuList = new ArrayList<String>();
        List<ProductDetailedInformation> returnList = new ArrayList<ProductDetailedInformation>();
        List<ProductDetailedInformation> ptList = new ArrayList<ProductDetailedInformation>();
        List<ProductDetailedInformation> zyList = new ArrayList<ProductDetailedInformation>();
        Map<String, ProductDetailedInformation> idMapping = new HashMap<String, ProductDetailedInformation>();

        if (list.isEmpty() || list == null || StringUtils.isEmpty(psamCode) || StringUtils.isEmpty(type)) {
            data.set_ReturnCode(ReturnMsg.CODE_ERR_000002);
            data.set_ReturnMsg("参数为空!");
            return data;
        }

        try {
        	
        	Tdiscount tdis = this.tdiscountMapper_R.selectTdiscount();
        	
        	BigDecimal store = new BigDecimal(tdis.getStore());
            for (ProductDetailedInformation productDetailedInformation : list) {
                o2oList.add("product_o2o_" + productDetailedInformation.getId());
                skuList.add(productDetailedInformation.getTgoodskuinfoid());
            }

            List<byte[]> bytes = redis.selectListByKeys(o2oList);
            for (byte[] productByte : bytes) {
                if (productByte != null) {
                    String productInfo = new String(productByte, "UTF-8");
                    ProductDetailedInformation productDetailedInformation = JSON.parseObject(productInfo, ProductDetailedInformation.class);
                    idMapping.put(productDetailedInformation.getId(), productDetailedInformation);
                }
            }
            for (ProductDetailedInformation productDetailedInformation : list) {
                if (idMapping.get(productDetailedInformation.getId()) != null) {
                    idMapping.get(productDetailedInformation.getId()).setSort(productDetailedInformation.getSort());
                }
            }
            list = new ArrayList<ProductDetailedInformation>(idMapping.values());

            List<Map<String, Object>> listMap = tgoodsPublishKdbSkuO2oMapper_R.getSkuStockAndSoldSkuStock(skuList);
            for (ProductDetailedInformation productDetailedInformation : list) {
                for (Map<String, Object> map : listMap) {
                    if (productDetailedInformation.getTgoodskuinfoid().equals(String.valueOf(map.get("tGoodSkuInfoId")))) {
                        productDetailedInformation.setStore(map.get("store") == null ? 0 : ((BigDecimal) map.get("store")).doubleValue());
                        productDetailedInformation.setSoldstore(map.get("soldStore") == null ? 0 : ((BigDecimal) map.get("soldStore")).doubleValue());
                        productDetailedInformation.setPlatorself( (int) map.get("platorself"));
                        productDetailedInformation.setDistributionFlag((int) map.get("distributionFlag"));
                        productDetailedInformation.setTempstoregoodsflag((int) map.get("tempStoreGoodsFlag"));
                        int platform =  (int) map.get("platorself");
                        
                        BigDecimal jsj = (BigDecimal) map.get("balancePrice");
                        
                        BigDecimal xsj = new BigDecimal(productDetailedInformation.getSaleprice_o2o());
                        
                        BigDecimal frjs = (BigDecimal) map.get("distributeProfitBase");
                        
                        BigDecimal yqsy = xsj.subtract(jsj).multiply(store.divide(new BigDecimal(100)).multiply(frjs.divide(new BigDecimal(100)))).setScale(2,   BigDecimal.ROUND_HALF_UP);
                        if(yqsy.compareTo(new BigDecimal(0)) < 0){
                        	yqsy = new BigDecimal(0).setScale(2,   BigDecimal.ROUND_HALF_UP);
                        }
                        productDetailedInformation.setYqsy(yqsy);
                        productDetailedInformation.setSaleflag(0);
                        // 商品自营平台标识。自营-452，平台-453
                        if(productDetailedInformation.getPlatorself() == 452){
                        	
                        	zyList.add(productDetailedInformation);
                        }else{
                        	
                        	ptList.add(productDetailedInformation);
                        }
                        
                    }
                }
            }

            Collections.sort(ptList, new Comparator<ProductDetailedInformation>() {
                public int compare(ProductDetailedInformation arg0, ProductDetailedInformation arg1) {
                    return arg1.getSort().compareTo(arg0.getSort());
                }
            });
            Collections.sort(zyList, new Comparator<ProductDetailedInformation>() {
                public int compare(ProductDetailedInformation arg0, ProductDetailedInformation arg1) {
                    return arg1.getSort().compareTo(arg0.getSort());
                }
            });
            data.set_ReturnCode(ReturnMsg.CODE_SUCCESS);
            if(type.equals("0")){
            	 data.set_ReturnData(zyList);
            }else{
            	 data.set_ReturnData(ptList);
            }
           
            return data;
        } catch (Exception e) {
            throw new LakalaException(e);
        }
    }

	@Override
	public ObjectOutput getSideShopGoodsByPsamAndVirtualCatId(
			SideShopGoodsListInput inputModel) throws LakalaException {
        ObjectOutput data = new ObjectOutput();
        List<ProductDetailedInformation> list = new ArrayList<ProductDetailedInformation>();
        List<Map<String, ProductDetailedInformation>> list1 = new ArrayList<Map<String, ProductDetailedInformation>>();
        List<ProductDetail> productDetails = new ArrayList<ProductDetail>();
        Map<String, ProductDetailedInformation> idMapping = new HashMap<String, ProductDetailedInformation>();

        if (inputModel == null || StringUtils.isEmpty(inputModel.getPsam()) || StringUtils.isEmpty(inputModel.getChannelid()) 
        		|| StringUtils.isEmpty(inputModel.getVirtualcatid()) || StringUtils.isEmpty(inputModel.getType())) {
            data.set_ReturnCode(ReturnMsg.CODE_ERR_000002);
            data.set_ReturnMsg("参数为空!");
            return data;
        }

        try {
            TerminalProduct tpd = this.getTerminalProductByParam(inputModel.getPsam(), inputModel.getChannelid());
            if (tpd != null) {
                List<TerminalChannel> terminalChannels = tpd.getTerminalChannels();
                for (TerminalChannel terminalChannel : terminalChannels) {
                    productDetails = terminalChannel.getProductList();
                    for (ProductDetail productDetail : productDetails) {
                        ProductDetailedInformation productDetailedInformation = productDetail.getProductDetailedInformation();
                     
                        if (!"all".equals(inputModel.getVirtualcatid())) {
                            Arrays.sort(productDetail.getVirtualCatIds());
                            int index = Arrays.binarySearch(productDetail.getVirtualCatIds(), inputModel.getVirtualcatid());
                            if (index > -1) {
                                if (idMapping.get(productDetailedInformation.getTgoodinfoid()) == null) {
                                    idMapping.put(productDetailedInformation.getTgoodinfoid(), productDetailedInformation);
                                } else {
                                    if (new BigDecimal(idMapping.get(productDetailedInformation.getTgoodinfoid()).getSaleprice_o2o()).compareTo(new BigDecimal(productDetailedInformation.getSaleprice_o2o())) == 1) {
                                        idMapping.put(productDetailedInformation.getTgoodinfoid(), productDetailedInformation);
                                    }
                                }
                            }
                            
                        } else {
                            if (idMapping.get(productDetailedInformation.getTgoodinfoid()) == null) {
                                idMapping.put(productDetailedInformation.getTgoodinfoid(), productDetailedInformation);
                            } else {
                                if (new BigDecimal(idMapping.get(productDetailedInformation.getTgoodinfoid()).getSaleprice_o2o()).compareTo(new BigDecimal(productDetailedInformation.getSaleprice_o2o())) == 1) {
                                    idMapping.put(productDetailedInformation.getTgoodinfoid(), productDetailedInformation);
                                }
                            }
                        }
                        
                        
                        
                        
                        	
                    }
                }
            } else {
                data.set_ReturnCode(ReturnMsg.CODE_ERR_000003);
                data.set_ReturnMsg("没有找到该频道下的商品！");
                return data;
            }
            //多个sku相同只取价格最低显示
            list = new ArrayList<ProductDetailedInformation>(idMapping.values());
          
            Collections.sort(list, new Comparator<ProductDetailedInformation>() {
                public int compare(ProductDetailedInformation arg0, ProductDetailedInformation arg1) {
                    return arg1.getSort().compareTo(arg0.getSort());
                }
            });
            
            
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("psamCode", inputModel.getPsam());
            map.put("virtualcatid", inputModel.getVirtualcatid());
            List<ProductDetailedInformation> downlist = tgoodskuinfoMapper_R.getSoldoutListByPsamAndVirtualcatid(map);
            
            ObjectOutput info = null;
            
            info = this.getPageProductDetile(list, inputModel.getPsam(), inputModel.getType());
            
            List<ProductDetailedInformation> listn = (List<ProductDetailedInformation>) info.get_ReturnData();
            if(downlist != null && downlist.size() > 0){
            	 listn.addAll(downlist);
            }
           
            OutListModel outListModel = new OutListModel();
            outListModel.setCount(listn.size());
            outListModel.setList(listn);
            data.set_ReturnCode(ReturnMsg.CODE_SUCCESS);
            data.set_ReturnData(outListModel);
            return data;
        } catch (LakalaException e) {
            throw new LakalaException(e);
        }
    }
}
