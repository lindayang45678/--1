/**
 * 得到指定sUrl中sName对应的value值
 * @param url
 * @param paraName
 * @return
 */
function getParamValueByName(sUrl, sName) {
	if(sUrl == "" || sUrl == null) {
		return "";
	}
	if(sUrl.indexOf("?") < 0) {
		return "";
	} else {
		sUrl = sUrl.substr(sUrl.indexOf("?")+1, sUrl.length);
		var arrayUrl = sUrl.split("&");
		for(var i = 0; i < arrayUrl.length; i ++) {
			var arrayParam = arrayUrl[i].split("=");
			if(arrayParam[0] == sName) {
				return unescape(arrayParam[1]);
			}
		}
	}
	return "";
}

/**
 * 数组去重复
 * @param arr
 * @return
 */
function uniqueArray(arr) {
	var ret = [];
	var hash = {};
	for(var i=0; i<arr.length; i++) {
		var item = arr[i];
	    var key = typeof(item) + item;
	    if(hash[key] !== 1) {
	    	ret.push(item);
	    	hash[key] = 1;
	    }
	}
	return ret;
}

/**
 * 商品、广告排序
 * @param arr
 * @return
 */
function sortGoodsAndAdvert(arr) {
	var arrPrd = arr.concat();
	for(var i = 0 ; i < arrPrd.length-1; i ++){
		for(var j = 0; j < arrPrd.length-1-i; j ++){
			var temp;
			var prevOrder = "";
			var nextOrder = "";
			prevOrder = arrPrd[j].sort;
			nextOrder = arrPrd[j+1].sort;
			if(prevOrder < nextOrder){
				temp = arrPrd[j+1];
				arrPrd[j+1] = arrPrd[j];
				arrPrd[j] = temp;
			}
		}
	}
	return arrPrd;
}

/**
 * 返回sku中价格最低的一项
 * @param skuList
 */
function getMinSku(array){
	var skuList = array.concat();
	if(skuList.length > 0){
		for(var i = 0; i < skuList.length; i ++){
			for(var j = 0; j < skuList.length-i-1; j ++){
				var temp;
				var prevPrice = skuList[j].salePrice;
				var nextPrice = skuList[j+1].salePrice;
				if(prevPrice > nextPrice){
					temp = skuList[j+1];
					skuList[j+1] = skuList[j];
					skuList[j] = temp;
				}
			}
		}
		return skuList;
	}else{
		return "";
	}
}

/**
 * 获取时间戳
 * @return
 */
function getTimeStamp() {
	var nowDate = new Date();
	var t = nowDate.getTime();
	return t;
}

/**
 * 计算倒计时--还剩xx天xx时xx分xx秒
 * @param startTime
 * @param dayShow
 * @param hourShow
 * @param minuteShow
 * @param secondShow
 */
function countdown(startTime, dayShow, hourShow, minuteShow, secondShow) {
	startTime = new Date(Date.parse(startTime.replace(/\-/g, "\/")));
	var nowTime = sysDate;
	if(typeof(nowTime)=="undefined" || nowTime=="") {
		nowTime = new Date();
	} else {
		nowTime = new Date(Date.parse(nowTime.replace(/\-/g, "\/")));
	}
	var intDiff = parseInt((startTime.getTime() - nowTime.getTime()) / 1000);
	if(nowTime < startTime) {
		window.setInterval(function() {
			var day = 0, hour = 0, minute = 0, second = 0;
			if(intDiff > 0) {
				day = Math.floor(intDiff / (60 * 60 * 24));
				hour = Math.floor(intDiff / (60 * 60)) - (day * 24);
				minute = Math.floor(intDiff / 60) - (day * 24 * 60) - (hour * 60);
				second = Math.floor(intDiff) - (day * 24 * 60 * 60) - (hour * 60 * 60) - (minute * 60);
			}
			if (minute <= 9) minute = '0' + minute;
			if (second <= 9) second = '0' + second;
			$(dayShow).html(day);
			$(hourShow).html(hour);
			$(minuteShow).html(minute);
			$(secondShow).html(second);
			intDiff --;
		}, 1000);
		return "1";
	} else {
		return "0";
	}
}

/**
 *  获取省市区名称
 *  @param proviceCode
 *  @param cityCode
 *  @param areaCode
 */
function getAreaRegion(proviceCode,cityCode,areaCode,areaAddress,area){
	var areaRegionJsonRoot = "../../json/area_region.json";
	var address = "";
	$.ajax({
        type: "GET",
        async: false,
        url: areaRegionJsonRoot,
        dataType: "json",
        cache: false,
        success: function(result) {
        	for(var index in result){
    			if(proviceCode == result[index].code){
    				address += result[index].name;
    			}
    			if(cityCode == result[index].code){
    				address += result[index].name;
    			}
    			if(areaCode == result[index].code){
    				address += result[index].name;
    			}
    		}
    		address += areaAddress;
    		$(area).html(address);
        }
    });
}

/**
 * 根据父Code和当前Code得到城市列表
 * @param citySelectId
 * @param parentCode
 * @param currCode
 */
function getCityNameByCode(citySelectId, parentCode, currCode) {
	$.ajax({
        type: "GET",
        async: false,
        url: "../../json/area_region.json",
        dataType: "json",
        cache: false,
        success: function(json) {
        	var cityLength = json.length;
    		var ret = '';
    		for(var i = 0; i< cityLength; i ++) {
    			if(json[i].parent == parentCode) {
    				ret += '<option value="' + json[i].code + '"';
    				if(json[i].code == currCode) {
    					ret += ' selected="true"';
    				}
    				ret += '>';
    				ret += json[i].name;
    				ret += '</option>';
    			}
    		}
    		$("#" + citySelectId).html(ret);
        }
    });
}

/**
 * 输出通用【确定】信息
 * @param msg
 */
function showConfirmMsg(msg) {
	$(".mask").remove();
	var sContent = '<div class="mask">';
	sContent += '<div class="popup-msg"><p>';
	sContent += msg;
	sContent += '</p>';
	sContent += '<a href="javascript:;" id="popup-confirm">确定</a>';
	sContent += '</div></div>';
	$('.container').append(sContent);
	$('.mask').show();
	$('.mask').live('click',function() {
		if(!preventRealClick()) {return;}
		$(this).hide();
	});
	$('#popup-confirm').live('click',function() {
		$('.mask').click();
	});
}

/**
 * 输出通用【确定】信息--点击确定后，返回上一页
 * @param msg
 */
function showBackToPrevMsg(msg) {
	$(".mask").remove();
	var sContent = '<div class="mask">';
	sContent += '<div class="popup-msg"><p>';
	sContent += msg;
	sContent += '</p>';
	sContent += '<a href="javascript:;" id="popup-back">确定</a>';
	sContent += '</div></div>';
	$('.container').append(sContent);
	$('.mask').show();
	$('#popup-back').live('click',function() {
		window.history.back();
	});
}

/**
 * 显示loading图标
 */
function showLoading() {
	$("#loading").width(windowWidth + "px").height(windowHeight + "px");
	$("#loading").show();
}

/**
 * 隐藏loading图标
 */
function hideLoading() {
	$("#loading").hide();
}

/**
 * 清除所有localStorage里的信息
 */
function clearStorage() {
	storage.clear();
}

/**
 * 商品图像加载出错时的处理
 * @param img
 * <img width="32" height="32" src="1.jpg" onerror="productErrImg(this)" />
 */
function productErrImg(img) {
    img.src = "../../images/product_default.jpg";
    img.onerror = null;
}

/**
 * 广告图像加载出错时的处理
 * @param img
 * <img width="32" height="32" src="1.jpg" onerror="adErrImg(this)" />
 */
function adErrImg(img) {
    img.src = "../../images/ad_default.jpg";
    img.onerror = null;
}

/**
 * 防止2次点击
 * @returns {Boolean}
 */
function preventRealClick() {
	if (ghostClickTime1 == null) {
		ghostClickTime1 = new Date().getTime();
    } else {
        var ghostClickTime2 = new Date().getTime();
        if(ghostClickTime2 - ghostClickTime1 < ghostClickTimeout) {
        	ghostClickTime1 = ghostClickTime2;
            return false;
        } else {
        	ghostClickTime1 = ghostClickTime2;
        }
    }
	return true;
}

/**
 * 根据设备加载js
 */
function loadJs(){
	var u = navigator.userAgent, app = navigator.appVersion;
    var isAndroid = u.indexOf('Android') > -1 || u.indexOf('Linux') > -1; //android终端或者uc浏览器
    var isiOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端

    if(isAndroid){
        $("#platJs").attr("src","../../js/lib/cordova-android.js");
    }else{
    	$("#platJs").attr("src","../../js/lib/cordova-ios.js");
    }

    document.addEventListener('deviceready', function(){
        console.log('loading complete');
    }, false);
}

/**
 * ajax请求方法
 * @param url
 * @param data
 * @param type
 * @param async
 * @param cache
 * @param dataType
 */
function ajaxCommon(url,data,type,async,cache,dataType){
	var resultJson;
	if(!data) data = {};
	if(!type) type = "POST";
	if(!async) async = false;
	if(!cache) cache = false;
	if(!dataType) dataType = "json";
	$.ajax({
        type: type,
        url: url,
        data: data,
        dataType: dataType,
        async: async,
        cache: cache,
        beforeSend: function(){
        	
        },
        success: function(result) {
        	resultJson = result;
        },
        error: function(){
        	console.log('resultJson Error');
        },
        complete: function(){
        	
        }
	});
	return resultJson;
}

/**
 * 输出通用Alert信息
 * @param msg
 */
function showAlertMsg(msg) {
	$("#popup-simple").remove();
	var sContent = '<section id="popup-simple">';
	sContent += '<div><p>';
	sContent += msg;
	sContent += '</p></div>';
	sContent += '</section>';
	$("body").append(sContent);

	$("#popup-simple").show();
	$("#popup-simple").on("tap", function() {
		$(this).hide();
	});
	setTimeout(function() {
		$("#popup-simple").hide();
	}, 3000);
}

/**
 * 输出XXXX年XX月XX日
 * @param data
 */
function formatData(data){
	if(data != null && data != ""){
		var year = data.split("-")[0];
		var month = data.split("-")[1];
		var day = data.split("-")[2];
		if(year.length === 4){
			return year + "年" + month + "月" + day +"日";
		}
		if(year.length === 2){
			return year + "月" + month + "日";
		}
	}else{
		return "";
	}
}

/**
 * 返回localStorage中相同sku商品的个数
 * @param goodsId
 * @param skuId
 * @param goodscount
 */
function uniqueStorage(goodsId,skuId,goodscount){
	var goodscount = parseInt(goodscount);
	if(storage.getItem(productPrefix+goodsId+"_"+skuId) != null) {
		var proVal = JSON.parse(storage.getItem(productPrefix+goodsId+"_"+skuId));
		if(proVal.tGoodSkuInfoId == skuId){
			goodscount +=  parseInt(proVal.goodscount);
		}
	}
	return goodscount;
}

/**
 * 返回localStorage中商品的数量
 */
function getGoodsCount(){
	var goodscount = 0;
	for(var i = 0; i < storage.length; i ++){
		var key = storage.key(i);
		if(key.indexOf(productPrefix) >= 0){
			var proVal = JSON.parse(storage.getItem(key));
			goodscount += parseInt(proVal.goodscount);
		}
	}
	return goodscount;
}

/**
 * 将resultJson中的null值转化为空字符串
 * @param resultJson 带转化的JSON对象
 * @returns 去掉null后的JSON对象
 */
function convertNullToEmpty(resultJson) {
	var result = JSON.stringify(resultJson);
	result = result.replace(/null/g, "\"\"");
	return $.parseJSON(result);
}

/**
 * 返回订单类型--批发订单||零售订单
 * @param channelcode
 * @returns {String}
 */
function getChannelcodeDesc(channelcode) {
	var desc = "";
	if(channelcode == channelcodePF) {
		desc = "批发订单";
	} else {
		desc = "零售订单";
	}
	return desc;
}

/**
 * 返回订单状态--99:未发货; 100:发货中; 101:部分发货; 102:已发货; 103:部分签收; 104:已签收; 216:已拒收; 217:物流异常
 * @param state
 * @returns {String}
 */
function getOrderStateDesc(state) {
	var desc = "";
	switch(state) {
		case stateWFH:
			desc = "未发货";
			break;
		case stateFHZ:
			desc = "发货中";
			break;
		case stateBFFH:
			desc = "部分发货";
			break;
		case stateYFH:
			desc = "已发货";
			break;
		case stateBFQS:
			desc = "部分签收";
			break;
		case stateYQS:
			desc = "已签收";
			break;
		case stateYJS:
			desc = "已拒收";
			break;
		case stateWLYC:
			desc = "物流异常";
			break;
	}
	return desc;
}

/**
 * 返回来源渠道--93:手机商城; 94:微信商城; 95:开店宝; 96:PC商城; 97:其他; 334:收款宝; 357:wap商城; 466:身边app-2B; 467:身边app-2C
 * @param source
 * @returns {String}
 */
function getOrderSourceDesc(source) {
	var desc = "";
	switch(source) {
		case sourcePhone:
			desc = "手机商城";
			break;
		case sourceWebchat:
			desc = "微信商城";
			break;
		case sourceKdb:
			desc = "开店宝";
			break;
		case sourcePC:
			desc = "PC商城";
			break;
		case sourceOther:
			desc = "其他";
			break;
		case sourceSkb:
			desc = "收款宝";
			break;
		case sourceWap:
			desc = "wap商城";
			break;
		case sourceSbApp2C:
			desc = "身边app";
			break;
	}
	return desc;
}

/**
 * 返回配送方式--86:快递到店; 87:快递到家
 * @param devicetype
 * @returns {String}
 */
function getDevicetypeDesc(devicetype) {
	var desc = "";
	switch(devicetype) {
		case devicetypeShop:
			desc = "快递到店";
			break;
		case devicetypeHome:
			desc = "快递到家";
			break;
	}
	return desc;
}

/**
 * 返回付款方式--237:拉卡拉; 238:银行; 239:支付宝; 240:货到付款; 241:其他; 432:微信支付;
 * @param paychanel
 * @returns {String}
 */
function getPaychanelDesc(paychanel) {
	var desc = "";
	switch(paychanel) {
		case paychannelLkl:
			desc = "拉卡拉";
			break;
		case paychanelBnk:
			desc = "银行";
			break;
		case paychanelZfb:
			desc = "支付宝";
			break;
		case paychanelCod:
			desc = "货到付款";
			break;
		case paychanelOther:
			desc = "其他";
			break;
		case paychanelWx:
			desc = "微信支付";
			break;
		case paychanelSkb:
			desc = "收款宝支付";
			break;	
	}
	return desc;
}

/**
 * 返回是否支付-150:是; 149:否
 * @param ispay
 * @returns {String}
 */
function getIspayDesc(ispay) {
	var desc = "";
	switch(ispay) {
		case ispayY:
			desc = "已付款";
			break;
		case ispayN:
			desc = "未付款";
			break;
	}
	return desc;
}

/**
 * 返回售后状态-正常订单:116; 换货中:117; 已换货:118; 退货中:119; 已退货:120
 * @param invalidstate
 * @returns {String}
 */
function getInvalidstateDesc(invalidstate) {
	var desc = "";
	switch(invalidstate) {
		case invalidstateNormal:
			desc = "正常订单";
			break;
		case invalidstateHHZ:
			desc = "换货中";
			break;
		case invalidstateYHH:
			desc = "已换货";
			break;
		case invalidstateTHZ:
			desc = "退货中";
			break;
		case invalidstateYTH:
			desc = "已退货";
			break;
	}
	return desc;
}