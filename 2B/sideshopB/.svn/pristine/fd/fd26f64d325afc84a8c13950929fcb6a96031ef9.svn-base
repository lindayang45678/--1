package com.lakala.module.order.service.impl;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.lakala.model.ShouhuoOutputSql;
import com.lakala.module.goods.vo.TgoodsSkuInfoInput;
import com.lakala.module.order.service.QuhuoCommonService;
import com.lakala.module.order.vo.ShouhuoInput;
import com.lakala.util.Constants;

@Service
public class QuhuoCommonServiceImpl implements QuhuoCommonService {
	@Autowired
	private com.lakala.mapper.w.order.QuhuoMapper quhuoMapper_w;
	@Autowired
	private com.lakala.mapper.r.order.ShouhuoMapper shouhuoMapper_r;
	private BigDecimal ZERO = BigDecimal.valueOf(0);
	/** 非生鲜库存 */
	private BigDecimal REPERTORY_NOT_FRESH = BigDecimal.valueOf(1000000);

	@Override
	public int getProviderState(String torderproviderid) {
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("torderproviderid", torderproviderid);
			map.put("cancelstate", Constants.TORDER_CANCELSTATE_WQX);
			List<Integer> stateList = quhuoMapper_w.getProviderState(map);
			int signflag = 0;
			int bfsignflag = 0;
			for (Integer state : stateList) {
				if (state == Constants.TORDER_STATE_YQS) {
					signflag++;
				}
				if (state == Constants.TORDER_STATE_BFQS) {
					bfsignflag++;
				}
			}
			if (signflag == stateList.size()) {
				return Constants.TORDER_STATE_YQS;
			}
			if (bfsignflag > 0 || signflag > 0) {
				return Constants.TORDER_STATE_BFQS;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		// 默认值
		return Constants.TORDER_STATE_DEFAULT;
	}

	@Override
	public void updateOrderProviderState(String torderproviderid, int providerstate, int paychannel) {
		try {
			if (providerstate != Constants.TORDER_STATE_DEFAULT) {
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("torderproviderid", torderproviderid);
				map.put("state", providerstate);
				if (paychannel == Constants.TORDER_PAYCHANNEL_HDFK) {
					map.put("ispay", Constants.TORDER_ISPAY_YZF);
				}
				quhuoMapper_w.updateOrderProviderState(map);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public void updateOrderState(String orderId, int orderstate, int paychannel) {
		try {
			if (orderstate != Constants.TORDER_STATE_DEFAULT) {
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("orderId", orderId);
				map.put("state", orderstate);
				if (paychannel == Constants.TORDER_PAYCHANNEL_HDFK) {
					map.put("ispay", Constants.TORDER_ISPAY_YZF);
				}
				quhuoMapper_w.updateOrderState(map);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public int getOrderState(String orderId) {
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("orderId", orderId);
			map.put("cancelstate", Constants.TORDER_CANCELSTATE_WQX);
			List<Integer> stateList = quhuoMapper_w.getOrderState(map);
			int signflag = 0;
			int bfsignflag = 0;
			for (Integer state : stateList) {
				if (state == Constants.TORDER_STATE_YQS) {
					signflag++;
				}
				if (state == Constants.TORDER_STATE_BFQS) {
					bfsignflag++;
				}
			}
			if (signflag == stateList.size()) {
				return Constants.TORDER_STATE_YQS;
			}
			if (bfsignflag > 0 || signflag > 0) {
				// 部分签收
				return Constants.TORDER_STATE_BFQS;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return Constants.TORDER_STATE_DEFAULT;
	}

	@Override
	public int getAllOrderPayState(Integer allorderid) {
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("allorderid", allorderid);
			map.put("cancelstate", Constants.TORDER_CANCELSTATE_WQX);
			List<Integer> stateList = quhuoMapper_w.getAllOrderPayState(map);
			int payflag = 0;
			for (Integer state : stateList) {
				if (state == Constants.TORDER_ISPAY_YZF) {
					payflag++;
				}
			}
			if (payflag == stateList.size()) {
				return Constants.TORDER_ISPAY_YZF;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return Constants.TORDER_ISPAY_DZF;
	}

	@Override
	public void updateAllOrderPayState(Integer allorderid) {
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("allorderid", allorderid);
			map.put("ispay", Constants.TORDER_ISPAY_YZF);
			quhuoMapper_w.updateAllOrderPayState(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 店主订单签收商品入库
	 * 
	 * @param or
	 * @return
	 */
	@Override
	public TgoodsSkuInfoInput putaway(Map<String, Object> map) {
		ShouhuoInput si = new ShouhuoInput();
		si.setOrderItemsId(String.valueOf(map.get("torderitemsid")));
		// 签收数量
		BigDecimal actualnum = BigDecimal.valueOf((int) map.get("actualnum"));
		BigDecimal publicPice = map.get("publicPice") != null &&!"".equals(map.get("publicPice")) ? new BigDecimal((String)map.get("publicPice")) : null;
		ShouhuoOutputSql breakRule = shouhuoMapper_r.getBreakRule(si);
		if(breakRule==null || breakRule.getCarton() == null || breakRule.getCarton().compareTo(ZERO) == 0){
			return null;
		}
		// 库存数量
		BigDecimal repertory = ZERO;
		TgoodsSkuInfoInput data = new TgoodsSkuInfoInput();
		data.setDeviceno(String.valueOf(map.get("deviceNo")));
		// 商品库的主键（非sku）
		data.settGoodInfoPoolId(breakRule.gettGoodInfoPoolId());
		// 商品发布价
		data.setSaleprice(publicPice);
		// 发布商品的skuID
		data.setGoodsSkuID(breakRule.getGoodsSkuID());
		// 是否生鲜
		data.setIsfreshfood(breakRule.getIsFresh());
		if (breakRule == null || breakRule.getCarton() == null || breakRule.getCarton().compareTo(ZERO) == 0 ||breakRule.getIsFresh() ==null) {
			// 该商品不可发布
			return null;
		} else {
			if (breakRule.getIsFresh() == 1) {
				// 生鲜商品库存=算出库存*100%
				repertory = breakRule.getCarton().multiply(actualnum).setScale(0, BigDecimal.ROUND_DOWN);
			} else {
				// 生鲜商品 库存设定为1000000
				repertory = REPERTORY_NOT_FRESH;
			}
		}
		data.setSkustock(repertory);
		return data;
	}
}
